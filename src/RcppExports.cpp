// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vad_webrtc_detection
Rcpp::List vad_webrtc_detection(std::string file, int mode, size_t frame_length);
RcppExport SEXP _audio_vadwebrtc_vad_webrtc_detection(SEXP fileSEXP, SEXP modeSEXP, SEXP frame_lengthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< int >::type mode(modeSEXP);
    Rcpp::traits::input_parameter< size_t >::type frame_length(frame_lengthSEXP);
    rcpp_result_gen = Rcpp::wrap(vad_webrtc_detection(file, mode, frame_length));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_audio_vadwebrtc_vad_webrtc_detection", (DL_FUNC) &_audio_vadwebrtc_vad_webrtc_detection, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_audio_vadwebrtc(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
